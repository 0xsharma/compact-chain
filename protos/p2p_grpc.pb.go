// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: protos/p2p.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	P2P_LatestBlock_FullMethodName   = "/protos.P2P/LatestBlock"
	P2P_TxPoolPending_FullMethodName = "/protos.P2P/TxPoolPending"
	P2P_BlocksInRange_FullMethodName = "/protos.P2P/BlocksInRange"
)

// P2PClient is the client API for P2P service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P2PClient interface {
	LatestBlock(ctx context.Context, in *LatestBlockRequest, opts ...grpc.CallOption) (*LatestBlockResponse, error)
	TxPoolPending(ctx context.Context, in *TxpoolPendingRequest, opts ...grpc.CallOption) (*TxpoolPendingResponse, error)
	BlocksInRange(ctx context.Context, in *BlocksInRangeRequest, opts ...grpc.CallOption) (*BlocksInRangeResponse, error)
}

type p2PClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PClient(cc grpc.ClientConnInterface) P2PClient {
	return &p2PClient{cc}
}

func (c *p2PClient) LatestBlock(ctx context.Context, in *LatestBlockRequest, opts ...grpc.CallOption) (*LatestBlockResponse, error) {
	out := new(LatestBlockResponse)
	err := c.cc.Invoke(ctx, P2P_LatestBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) TxPoolPending(ctx context.Context, in *TxpoolPendingRequest, opts ...grpc.CallOption) (*TxpoolPendingResponse, error) {
	out := new(TxpoolPendingResponse)
	err := c.cc.Invoke(ctx, P2P_TxPoolPending_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) BlocksInRange(ctx context.Context, in *BlocksInRangeRequest, opts ...grpc.CallOption) (*BlocksInRangeResponse, error) {
	out := new(BlocksInRangeResponse)
	err := c.cc.Invoke(ctx, P2P_BlocksInRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PServer is the server API for P2P service.
// All implementations must embed UnimplementedP2PServer
// for forward compatibility
type P2PServer interface {
	LatestBlock(context.Context, *LatestBlockRequest) (*LatestBlockResponse, error)
	TxPoolPending(context.Context, *TxpoolPendingRequest) (*TxpoolPendingResponse, error)
	BlocksInRange(context.Context, *BlocksInRangeRequest) (*BlocksInRangeResponse, error)
	mustEmbedUnimplementedP2PServer()
}

// UnimplementedP2PServer must be embedded to have forward compatible implementations.
type UnimplementedP2PServer struct {
}

func (UnimplementedP2PServer) LatestBlock(context.Context, *LatestBlockRequest) (*LatestBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestBlock not implemented")
}
func (UnimplementedP2PServer) TxPoolPending(context.Context, *TxpoolPendingRequest) (*TxpoolPendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxPoolPending not implemented")
}
func (UnimplementedP2PServer) BlocksInRange(context.Context, *BlocksInRangeRequest) (*BlocksInRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlocksInRange not implemented")
}
func (UnimplementedP2PServer) mustEmbedUnimplementedP2PServer() {}

// UnsafeP2PServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2PServer will
// result in compilation errors.
type UnsafeP2PServer interface {
	mustEmbedUnimplementedP2PServer()
}

func RegisterP2PServer(s grpc.ServiceRegistrar, srv P2PServer) {
	s.RegisterService(&P2P_ServiceDesc, srv)
}

func _P2P_LatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).LatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2P_LatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).LatestBlock(ctx, req.(*LatestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_TxPoolPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxpoolPendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).TxPoolPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2P_TxPoolPending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).TxPoolPending(ctx, req.(*TxpoolPendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_BlocksInRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlocksInRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).BlocksInRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2P_BlocksInRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).BlocksInRange(ctx, req.(*BlocksInRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// P2P_ServiceDesc is the grpc.ServiceDesc for P2P service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2P_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.P2P",
	HandlerType: (*P2PServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LatestBlock",
			Handler:    _P2P_LatestBlock_Handler,
		},
		{
			MethodName: "TxPoolPending",
			Handler:    _P2P_TxPoolPending_Handler,
		},
		{
			MethodName: "BlocksInRange",
			Handler:    _P2P_BlocksInRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/p2p.proto",
}
